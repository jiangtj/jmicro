/*
 * This file is generated by jOOQ.
 */
package com.jiangtj.micro.payment.jooq.tables


import com.jiangtj.micro.payment.jooq.DefaultSchema
import com.jiangtj.micro.payment.jooq.indexes.PAYMENT_RECORD_IDX_ORDER_ID
import com.jiangtj.micro.payment.jooq.indexes.PAYMENT_RECORD_IDX_PAYMENT_ID
import com.jiangtj.micro.payment.jooq.indexes.PAYMENT_RECORD_IDX_USER_ID
import com.jiangtj.micro.payment.jooq.keys.KEY_PAYMENT_RECORD_PRIMARY
import com.jiangtj.micro.payment.jooq.tables.records.PaymentRecordRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.math.BigDecimal
import java.time.LocalDateTime


/**
 * 支付记录
 */
@Suppress("UNCHECKED_CAST")
open class PaymentRecord(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PaymentRecordRecord>?,
    parentPath: InverseForeignKey<out Record, PaymentRecordRecord>?,
    aliased: Table<PaymentRecordRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PaymentRecordRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("支付记录"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>payment_record</code>
         */
        val PAYMENT_RECORD: PaymentRecord = PaymentRecord()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PaymentRecordRecord> = PaymentRecordRecord::class.java

    /**
     * The column <code>payment_record.id</code>. 记录ID
     */
    val ID: TableField<PaymentRecordRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "记录ID")

    /**
     * The column <code>payment_record.create_time</code>. 创建时间
     */
    val CREATE_TIME: TableField<PaymentRecordRecord, LocalDateTime?> = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "创建时间")

    /**
     * The column <code>payment_record.modify_time</code>. 更新时间
     */
    val MODIFY_TIME: TableField<PaymentRecordRecord, LocalDateTime?> = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "更新时间")

    /**
     * The column <code>payment_record.payment_id</code>. 支付ID
     */
    val PAYMENT_ID: TableField<PaymentRecordRecord, String?> = createField(DSL.name("payment_id"), SQLDataType.VARCHAR(255).nullable(false), this, "支付ID")

    /**
     * The column <code>payment_record.order_id</code>. 订单ID
     */
    val ORDER_ID: TableField<PaymentRecordRecord, String?> = createField(DSL.name("order_id"), SQLDataType.VARCHAR(255).nullable(false), this, "订单ID")

    /**
     * The column <code>payment_record.user_id</code>. 用户ID
     */
    val USER_ID: TableField<PaymentRecordRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "用户ID")

    /**
     * The column <code>payment_record.amount</code>. 支付金额
     */
    val AMOUNT: TableField<PaymentRecordRecord, BigDecimal?> = createField(DSL.name("amount"), SQLDataType.DECIMAL(15, 2).nullable(false), this, "支付金额")

    /**
     * The column <code>payment_record.status</code>. 支付状态
     */
    val STATUS: TableField<PaymentRecordRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false), this, "支付状态")

    /**
     * The column <code>payment_record.payment_time</code>. 支付时间
     */
    val PAYMENT_TIME: TableField<PaymentRecordRecord, LocalDateTime?> = createField(DSL.name("payment_time"), SQLDataType.LOCALDATETIME(0), this, "支付时间")

    /**
     * The column <code>payment_record.transaction_id</code>. 交易ID
     */
    val TRANSACTION_ID: TableField<PaymentRecordRecord, String?> = createField(DSL.name("transaction_id"), SQLDataType.VARCHAR(255), this, "交易ID")

    /**
     * The column <code>payment_record.payment_method</code>. 支付方式
     */
    val PAYMENT_METHOD: TableField<PaymentRecordRecord, String?> = createField(DSL.name("payment_method"), SQLDataType.VARCHAR(255), this, "支付方式")

    private constructor(alias: Name, aliased: Table<PaymentRecordRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PaymentRecordRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PaymentRecordRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>payment_record</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>payment_record</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>payment_record</code> table reference
     */
    constructor(): this(DSL.name("payment_record"), null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(PAYMENT_RECORD_IDX_ORDER_ID, PAYMENT_RECORD_IDX_PAYMENT_ID, PAYMENT_RECORD_IDX_USER_ID)
    override fun getIdentity(): Identity<PaymentRecordRecord, Int?> = super.getIdentity() as Identity<PaymentRecordRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PaymentRecordRecord> = KEY_PAYMENT_RECORD_PRIMARY
    override fun `as`(alias: String): PaymentRecord = PaymentRecord(DSL.name(alias), this)
    override fun `as`(alias: Name): PaymentRecord = PaymentRecord(alias, this)
    override fun `as`(alias: Table<*>): PaymentRecord = PaymentRecord(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PaymentRecord = PaymentRecord(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PaymentRecord = PaymentRecord(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PaymentRecord = PaymentRecord(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PaymentRecord = PaymentRecord(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PaymentRecord = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PaymentRecord = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PaymentRecord = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PaymentRecord = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PaymentRecord = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PaymentRecord = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PaymentRecord = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PaymentRecord = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PaymentRecord = where(DSL.notExists(select))
}
