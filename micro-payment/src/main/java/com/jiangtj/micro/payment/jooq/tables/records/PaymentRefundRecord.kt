/*
 * This file is generated by jOOQ.
 */
package com.jiangtj.micro.payment.jooq.tables.records


import com.jiangtj.micro.payment.jooq.tables.PaymentRefund
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import java.math.BigDecimal
import java.time.LocalDateTime


/**
 * 支付退款记录
 */
@Suppress("UNCHECKED_CAST")
open class PaymentRefundRecord() : UpdatableRecordImpl<PaymentRefundRecord>(PaymentRefund.PAYMENT_REFUND) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var createTime: LocalDateTime?
        set(value): Unit = set(1, value)
        get(): LocalDateTime? = get(1) as LocalDateTime?

    open var modifyTime: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    @get:NotNull
    @get:Size(max = 50)
    open var refundNo: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    @get:NotNull
    @get:Size(max = 50)
    open var orderNo: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    @get:NotNull
    open var paymentId: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    @get:Size(max = 50)
    open var channelRefundId: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    @get:NotNull
    open var amount: BigDecimal?
        set(value): Unit = set(7, value)
        get(): BigDecimal? = get(7) as BigDecimal?

    @get:NotNull
    open var status: Byte?
        set(value): Unit = set(8, value)
        get(): Byte? = get(8) as Byte?

    open var refundTime: LocalDateTime?
        set(value): Unit = set(9, value)
        get(): LocalDateTime? = get(9) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised PaymentRefundRecord
     */
    constructor(id: Int? = null, createTime: LocalDateTime? = null, modifyTime: LocalDateTime? = null, refundNo: String? = null, orderNo: String? = null, paymentId: Int? = null, channelRefundId: String? = null, amount: BigDecimal? = null, status: Byte? = null, refundTime: LocalDateTime? = null): this() {
        this.id = id
        this.createTime = createTime
        this.modifyTime = modifyTime
        this.refundNo = refundNo
        this.orderNo = orderNo
        this.paymentId = paymentId
        this.channelRefundId = channelRefundId
        this.amount = amount
        this.status = status
        this.refundTime = refundTime
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised PaymentRefundRecord
     */
    constructor(value: com.jiangtj.micro.payment.jooq.tables.pojos.PaymentRefund?): this() {
        if (value != null) {
            this.id = value.id
            this.createTime = value.createTime
            this.modifyTime = value.modifyTime
            this.refundNo = value.refundNo
            this.orderNo = value.orderNo
            this.paymentId = value.paymentId
            this.channelRefundId = value.channelRefundId
            this.amount = value.amount
            this.status = value.status
            this.refundTime = value.refundTime
            resetChangedOnNotNull()
        }
    }
}
