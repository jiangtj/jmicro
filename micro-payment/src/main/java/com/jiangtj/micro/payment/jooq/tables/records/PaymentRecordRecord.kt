/*
 * This file is generated by jOOQ.
 */
package com.jiangtj.micro.payment.jooq.tables.records


import com.jiangtj.micro.payment.jooq.tables.PaymentRecord
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import java.math.BigDecimal
import java.time.LocalDateTime


/**
 * 支付记录
 */
@Suppress("UNCHECKED_CAST")
open class PaymentRecordRecord() : UpdatableRecordImpl<PaymentRecordRecord>(PaymentRecord.PAYMENT_RECORD) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var createTime: LocalDateTime?
        set(value): Unit = set(1, value)
        get(): LocalDateTime? = get(1) as LocalDateTime?

    open var modifyTime: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    @get:NotNull
    @get:Size(max = 255)
    open var paymentId: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    @get:NotNull
    @get:Size(max = 255)
    open var orderId: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    @get:NotNull
    open var userId: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    @get:NotNull
    open var amount: BigDecimal?
        set(value): Unit = set(6, value)
        get(): BigDecimal? = get(6) as BigDecimal?

    @get:NotNull
    @get:Size(max = 50)
    open var status: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var paymentTime: LocalDateTime?
        set(value): Unit = set(8, value)
        get(): LocalDateTime? = get(8) as LocalDateTime?

    @get:Size(max = 255)
    open var transactionId: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    @get:Size(max = 255)
    open var paymentMethod: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised PaymentRecordRecord
     */
    constructor(id: Int? = null, createTime: LocalDateTime? = null, modifyTime: LocalDateTime? = null, paymentId: String? = null, orderId: String? = null, userId: Int? = null, amount: BigDecimal? = null, status: String? = null, paymentTime: LocalDateTime? = null, transactionId: String? = null, paymentMethod: String? = null): this() {
        this.id = id
        this.createTime = createTime
        this.modifyTime = modifyTime
        this.paymentId = paymentId
        this.orderId = orderId
        this.userId = userId
        this.amount = amount
        this.status = status
        this.paymentTime = paymentTime
        this.transactionId = transactionId
        this.paymentMethod = paymentMethod
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised PaymentRecordRecord
     */
    constructor(value: com.jiangtj.micro.payment.jooq.tables.pojos.PaymentRecord?): this() {
        if (value != null) {
            this.id = value.id
            this.createTime = value.createTime
            this.modifyTime = value.modifyTime
            this.paymentId = value.paymentId
            this.orderId = value.orderId
            this.userId = value.userId
            this.amount = value.amount
            this.status = value.status
            this.paymentTime = value.paymentTime
            this.transactionId = value.transactionId
            this.paymentMethod = value.paymentMethod
            resetChangedOnNotNull()
        }
    }
}
