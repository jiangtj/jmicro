/*
 * This file is generated by jOOQ.
 */
package com.jiangtj.micro.payment.jooq.tables


import com.jiangtj.micro.payment.jooq.keys.KEY_PAYMENT_CALLBACK_PRIMARY
import com.jiangtj.micro.payment.jooq.tables.records.PaymentCallbackRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime


/**
 * 支付回调
 */
@Suppress("UNCHECKED_CAST")
open class PaymentCallback(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PaymentCallbackRecord>?,
    parentPath: InverseForeignKey<out Record, PaymentCallbackRecord>?,
    aliased: Table<PaymentCallbackRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PaymentCallbackRecord>(
    alias,
    null,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("支付回调"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>payment_callback</code>
         */
        val PAYMENT_CALLBACK: PaymentCallback = PaymentCallback()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PaymentCallbackRecord> = PaymentCallbackRecord::class.java

    /**
     * The column <code>payment_callback.id</code>. 记录ID
     */
    val ID: TableField<PaymentCallbackRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "记录ID")

    /**
     * The column <code>payment_callback.create_time</code>. 创建时间
     */
    val CREATE_TIME: TableField<PaymentCallbackRecord, LocalDateTime?> = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "创建时间")

    /**
     * The column <code>payment_callback.modify_time</code>. 更新时间
     */
    val MODIFY_TIME: TableField<PaymentCallbackRecord, LocalDateTime?> = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "更新时间")

    /**
     * The column <code>payment_callback.notify_id</code>. 通知ID
     */
    val NOTIFY_ID: TableField<PaymentCallbackRecord, String?> = createField(DSL.name("notify_id"), SQLDataType.VARCHAR(50).nullable(false), this, "通知ID")

    /**
     * The column <code>payment_callback.type</code>. 回调类型 1 支付回调 2 退款回调
     */
    val TYPE: TableField<PaymentCallbackRecord, Byte?> = createField(DSL.name("type"), SQLDataType.TINYINT.nullable(false), this, "回调类型 1 支付回调 2 退款回调")

    /**
     * The column <code>payment_callback.order_no</code>. 订单编号/退款编号
     */
    val ORDER_NO: TableField<PaymentCallbackRecord, String?> = createField(DSL.name("order_no"), SQLDataType.VARCHAR(50).nullable(false), this, "订单编号/退款编号")

    /**
     * The column <code>payment_callback.transaction_id</code>. 第三方交易/退款ID
     */
    val TRANSACTION_ID: TableField<PaymentCallbackRecord, String?> = createField(DSL.name("transaction_id"), SQLDataType.VARCHAR(50).nullable(false), this, "第三方交易/退款ID")

    /**
     * The column <code>payment_callback.status</code>. 处理状态 1 待处理 2 已处理
     */
    val STATUS: TableField<PaymentCallbackRecord, Byte?> = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false), this, "处理状态 1 待处理 2 已处理")

    /**
     * The column <code>payment_callback.callback_info</code>. 回调内容
     */
    val CALLBACK_INFO: TableField<PaymentCallbackRecord, JSON?> = createField(DSL.name("callback_info"), SQLDataType.JSON.nullable(false), this, "回调内容")

    private constructor(alias: Name, aliased: Table<PaymentCallbackRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PaymentCallbackRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PaymentCallbackRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>payment_callback</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>payment_callback</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>payment_callback</code> table reference
     */
    constructor(): this(DSL.name("payment_callback"), null)
    override fun getIdentity(): Identity<PaymentCallbackRecord, Int?> = super.getIdentity() as Identity<PaymentCallbackRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PaymentCallbackRecord> = KEY_PAYMENT_CALLBACK_PRIMARY
    override fun `as`(alias: String): PaymentCallback = PaymentCallback(DSL.name(alias), this)
    override fun `as`(alias: Name): PaymentCallback = PaymentCallback(alias, this)
    override fun `as`(alias: Table<*>): PaymentCallback = PaymentCallback(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PaymentCallback = PaymentCallback(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PaymentCallback = PaymentCallback(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PaymentCallback = PaymentCallback(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PaymentCallback = PaymentCallback(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PaymentCallback = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PaymentCallback = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PaymentCallback = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PaymentCallback = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PaymentCallback = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PaymentCallback = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PaymentCallback = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PaymentCallback = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PaymentCallback = where(DSL.notExists(select))
}
