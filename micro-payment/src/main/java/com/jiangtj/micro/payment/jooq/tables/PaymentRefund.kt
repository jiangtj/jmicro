/*
 * This file is generated by jOOQ.
 */
package com.jiangtj.micro.payment.jooq.tables


import com.jiangtj.micro.payment.jooq.indexes.PAYMENT_REFUND_IDX_ORDER_NO
import com.jiangtj.micro.payment.jooq.indexes.PAYMENT_REFUND_IDX_PAYMENT_ID
import com.jiangtj.micro.payment.jooq.indexes.PAYMENT_REFUND_IDX_REFUND_NO
import com.jiangtj.micro.payment.jooq.keys.KEY_PAYMENT_REFUND_PRIMARY
import com.jiangtj.micro.payment.jooq.tables.records.PaymentRefundRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.math.BigDecimal
import java.time.LocalDateTime


/**
 * 支付退款记录
 */
@Suppress("UNCHECKED_CAST")
open class PaymentRefund(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PaymentRefundRecord>?,
    parentPath: InverseForeignKey<out Record, PaymentRefundRecord>?,
    aliased: Table<PaymentRefundRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PaymentRefundRecord>(
    alias,
    null,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("支付退款记录"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>payment_refund</code>
         */
        val PAYMENT_REFUND: PaymentRefund = PaymentRefund()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PaymentRefundRecord> = PaymentRefundRecord::class.java

    /**
     * The column <code>payment_refund.id</code>. 记录ID
     */
    val ID: TableField<PaymentRefundRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "记录ID")

    /**
     * The column <code>payment_refund.create_time</code>. 创建时间
     */
    val CREATE_TIME: TableField<PaymentRefundRecord, LocalDateTime?> = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "创建时间")

    /**
     * The column <code>payment_refund.modify_time</code>. 更新时间
     */
    val MODIFY_TIME: TableField<PaymentRefundRecord, LocalDateTime?> = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "更新时间")

    /**
     * The column <code>payment_refund.refund_no</code>. 退款编号
     */
    val REFUND_NO: TableField<PaymentRefundRecord, String?> = createField(DSL.name("refund_no"), SQLDataType.VARCHAR(50).nullable(false), this, "退款编号")

    /**
     * The column <code>payment_refund.order_no</code>. 退款的订单编号
     */
    val ORDER_NO: TableField<PaymentRefundRecord, String?> = createField(DSL.name("order_no"), SQLDataType.VARCHAR(50).nullable(false), this, "退款的订单编号")

    /**
     * The column <code>payment_refund.payment_id</code>. 退款的订单ID
     */
    val PAYMENT_ID: TableField<PaymentRefundRecord, Int?> = createField(DSL.name("payment_id"), SQLDataType.INTEGER.nullable(false), this, "退款的订单ID")

    /**
     * The column <code>payment_refund.channel_refund_id</code>. 第三方退款ID
     */
    val CHANNEL_REFUND_ID: TableField<PaymentRefundRecord, String?> = createField(DSL.name("channel_refund_id"), SQLDataType.VARCHAR(50), this, "第三方退款ID")

    /**
     * The column <code>payment_refund.amount</code>. 退款金额
     */
    val AMOUNT: TableField<PaymentRefundRecord, BigDecimal?> = createField(DSL.name("amount"), SQLDataType.DECIMAL(12, 2).nullable(false), this, "退款金额")

    /**
     * The column <code>payment_refund.status</code>. 退款状态 1 待退款 2 退款中 3 已退款 4
     * 已取消 5 已失败
     */
    val STATUS: TableField<PaymentRefundRecord, Byte?> = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false), this, "退款状态 1 待退款 2 退款中 3 已退款 4 已取消 5 已失败")

    /**
     * The column <code>payment_refund.refund_time</code>. 退款时间
     */
    val REFUND_TIME: TableField<PaymentRefundRecord, LocalDateTime?> = createField(DSL.name("refund_time"), SQLDataType.LOCALDATETIME(0), this, "退款时间")

    private constructor(alias: Name, aliased: Table<PaymentRefundRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PaymentRefundRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PaymentRefundRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>payment_refund</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>payment_refund</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>payment_refund</code> table reference
     */
    constructor(): this(DSL.name("payment_refund"), null)
    override fun getIndexes(): List<Index> = listOf(PAYMENT_REFUND_IDX_ORDER_NO, PAYMENT_REFUND_IDX_PAYMENT_ID, PAYMENT_REFUND_IDX_REFUND_NO)
    override fun getIdentity(): Identity<PaymentRefundRecord, Int?> = super.getIdentity() as Identity<PaymentRefundRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PaymentRefundRecord> = KEY_PAYMENT_REFUND_PRIMARY
    override fun `as`(alias: String): PaymentRefund = PaymentRefund(DSL.name(alias), this)
    override fun `as`(alias: Name): PaymentRefund = PaymentRefund(alias, this)
    override fun `as`(alias: Table<*>): PaymentRefund = PaymentRefund(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PaymentRefund = PaymentRefund(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PaymentRefund = PaymentRefund(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PaymentRefund = PaymentRefund(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PaymentRefund = PaymentRefund(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PaymentRefund = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PaymentRefund = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PaymentRefund = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PaymentRefund = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PaymentRefund = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PaymentRefund = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PaymentRefund = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PaymentRefund = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PaymentRefund = where(DSL.notExists(select))
}
